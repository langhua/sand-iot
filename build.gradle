/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
plugins.apply("com.github.node-gradle.node")


def logArgFound = false
def originalLog4jConfig = ""
def log4jConfig = ""

applicationDefaultJvmArgs.each { jvmArg ->
    if (jvmArg && jvmArg.startsWith("-Dlog4j.configurationFile=") && !logArgFound) {
        originalLog4jConfig = jvmArg
        if (!jvmArg.endsWith("=")) {
            jvmArg += ","
        }
        log4jConfig = jvmArg + "log4j2-sand-iot.xml"
        logArgFound = true
    }
}

if (!logArgFound) {
    applicationDefaultJvmArgs.add('-Dlog4j.configurationFile=log4j2.xml,log4j2-sand-iot.xml')
} else {
    applicationDefaultJvmArgs.remove(originalLog4jConfig)
    applicationDefaultJvmArgs.add(log4jConfig)
}

dependencies {
    pluginLibsCompile 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.5',
                      'com.google.code.gson:gson:2.10.1',
                      'com.squareup.okhttp3:okhttp:4.11.0',
                      'org.jmdns:jmdns:3.5.9'

    pluginLibsRuntime ('org.slf4j:slf4j-api:1.7.36') {
        force true
    }

    pluginLibsRuntime 'com.lmax:disruptor:3.4.2'
}

task mdnsDist(type: NpmTask) {
    args = ['run', 'build', '--emptyOutDir']
    // on workingDir, see https://github.com/node-gradle/gradle-node-plugin/blob/master/docs/faq.md
    String workingDirPath = rootProject.pluginsDir + '/sand-iot/vuejs/mdns'
    if (rootProject.os.contains('windows')) {
        workingDirPath = workingDirPath.replaceAll('\\\\', '/')
    }
    // use real path to avoid problems with symlinks
    workingDir = file(workingDirPath).toPath().toRealPath().toFile()
}

rootProject.classes.dependsOn(mdnsDist)
